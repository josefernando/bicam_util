package br.com.bicam.util;

import java.util.HashSet;

public class KeywordSqlSybase extends KeywordLanguageBase {
	
	public KeywordSqlSybase(){
		super();
		 getProperties().addProperty("LANGUAGE", "TRANSACT_SYBASE");
		 getProperties().addProperty("CASE_SENSITIVE", false);
		setKeywordsOption1();
		loadKeywordByRule();
		setDataTypeLanguage();
		setParameters();
		setClassConstantsLanguage();
		setLanguageFunctionsLanguage();
		setFirstKeywordOfStatementLanguage();
		}
	
	public void setParameters() {
		parameters.put("SERVER_DEFAULT", "SERVER_DEFAULT");
		parameters.put("DB_OWNER_DEFAULT", "DB_OWNER_DEFAULT");
		parameters.put("DATABASE_DEFAULT", "DATABASE_DEFAULT");
	}
	public void setFirstKeywordOfStatementLanguage() {
		firstKeywordOfStatementLanguage.add("BEGIN");
		firstKeywordOfStatementLanguage.add("BREAK");
		firstKeywordOfStatementLanguage.add("CHECKPOINT");
		firstKeywordOfStatementLanguage.add("COMMIT");
		firstKeywordOfStatementLanguage.add("CLOSE");
		firstKeywordOfStatementLanguage.add("CONNECT");
		firstKeywordOfStatementLanguage.add("CONTINUE");
		firstKeywordOfStatementLanguage.add("DISCONNECT");
		firstKeywordOfStatementLanguage.add("DEALLOCATE");
		firstKeywordOfStatementLanguage.add("DROP");
		firstKeywordOfStatementLanguage.add("EXEC");
		firstKeywordOfStatementLanguage.add("EXECUTE");
		firstKeywordOfStatementLanguage.add("GO");
		firstKeywordOfStatementLanguage.add("GOTO");
		firstKeywordOfStatementLanguage.add("IF");
		firstKeywordOfStatementLanguage.add("PRINT");	
		firstKeywordOfStatementLanguage.add("OPEN");
		firstKeywordOfStatementLanguage.add("RETURN");
		firstKeywordOfStatementLanguage.add("SET");
		firstKeywordOfStatementLanguage.add("USE");
	    firstKeywordOfStatementLanguage.add("WHILE");
	}
	
	private void loadKeywordByRule(){
		HashSet<String> set = new HashSet<String>();
		keywordByRule.put("type", set);
	    set.add("FLOATN");
	    set.add("FLOAT");
	    set.add("DATETIMN");
	    set.add("DATETIME");
	    set.add("REAL");
	    set.add("NUMERICN");
	    set.add("NUMERIC");
	    set.add("DECIMALN");
	    set.add("DECIMAL");
	    set.add("MONEYN");
	    set.add("MONEY");
	    set.add("SMALLMONEY");
	    set.add("SMALLDATETIME");
	    set.add("INTN");
	    set.add("INT");
	    set.add("SMALLINT");
	    set.add("TINYINT");
	    set.add("BIT");
	    set.add("UNIVARCHAR");
	    set.add("UNICHAR");
	    set.add("SYSNAME");
	    set.add("VARCHAR");
	    set.add("NVARCHAR");
	    set.add("CHAR");
	    set.add("NCHAR");
	    set.add("TIMESTAMP");
	    set.add("VARBINARY");
	    set.add("BINARY");
	    set.add("TEXT");
	    set.add("IMAGE");
	    set.add("TIMESTAMP");

	    
	    set = new HashSet<String>();
		keywordByRule.put("sqlRowAggregateFunction", set);
	    set.add("AVG");
	    set.add("COUNT");
	    set.add("MAX");
	    set.add("MIN");
	    set.add("SUM");
	}

	public void setStatementKeywordsLanguage() {
		    statementKeywordsLanguage.add("ADD");
		    statementKeywordsLanguage.add("ALL");
		    statementKeywordsLanguage.add("ALTER");
		    statementKeywordsLanguage.add("AND");
		    statementKeywordsLanguage.add("ANY");
		    statementKeywordsLanguage.add("ARITH_OVERFLOW");
		    statementKeywordsLanguage.add("AS");
		    statementKeywordsLanguage.add("ASC");
		    statementKeywordsLanguage.add("AT");
		    statementKeywordsLanguage.add("AUTHORIZATION");
		    statementKeywordsLanguage.add("AVG");
		    statementKeywordsLanguage.add("BEGIN");
		    statementKeywordsLanguage.add("BETWEEN");
		    statementKeywordsLanguage.add("BREAK");
		    statementKeywordsLanguage.add("BROWSE");
		    statementKeywordsLanguage.add("BULK");
		    statementKeywordsLanguage.add("BY");
		    statementKeywordsLanguage.add("CASCADE");
		    statementKeywordsLanguage.add("CASE");
		    statementKeywordsLanguage.add("CHAR_CONVERT");
		    statementKeywordsLanguage.add("CHECK");
		    statementKeywordsLanguage.add("CHECKPOINT");
		    statementKeywordsLanguage.add("CLOSE");
		    statementKeywordsLanguage.add("CLUSTERED");
		    statementKeywordsLanguage.add("COALESCE");
		    statementKeywordsLanguage.add("COMMIT");
		    statementKeywordsLanguage.add("COMPUTE");
		    statementKeywordsLanguage.add("CONFIRM");
		    statementKeywordsLanguage.add("CONNECT");
		    statementKeywordsLanguage.add("CONSTRAINT");
		    statementKeywordsLanguage.add("CONTINUE");
		    statementKeywordsLanguage.add("CONTROLROW");
		    statementKeywordsLanguage.add("CONVERT");
		    statementKeywordsLanguage.add("COUNT");
		    statementKeywordsLanguage.add("COUNT_BIG");
		    statementKeywordsLanguage.add("CREATE");
		    statementKeywordsLanguage.add("CURRENT");
		    statementKeywordsLanguage.add("CURSOR");
		    statementKeywordsLanguage.add("DATABASE");
		    statementKeywordsLanguage.add("DBCC");
		    statementKeywordsLanguage.add("DEALLOCATE");
		    statementKeywordsLanguage.add("DECLARE");
		    statementKeywordsLanguage.add("DECRYPT");
		    statementKeywordsLanguage.add("DEFAULT");
		    statementKeywordsLanguage.add("DELETE");
		    statementKeywordsLanguage.add("DESC");
		    statementKeywordsLanguage.add("DETERMINISTIC");
		    statementKeywordsLanguage.add("DISK");
		    statementKeywordsLanguage.add("DISTINCT");
		    statementKeywordsLanguage.add("DROP");
		    statementKeywordsLanguage.add("DUMMY");
		    statementKeywordsLanguage.add("DUMP");
		    statementKeywordsLanguage.add("ELSE");
		    statementKeywordsLanguage.add("ENCRYPT");
		    statementKeywordsLanguage.add("END");
		    statementKeywordsLanguage.add("ENDTRAN");
		    statementKeywordsLanguage.add("ERRLVL");
		    statementKeywordsLanguage.add("ERRORDATA");
		    statementKeywordsLanguage.add("ERROREXIT");
		    statementKeywordsLanguage.add("ESCAPE");
		    statementKeywordsLanguage.add("EXCEPT");
		    statementKeywordsLanguage.add("EXCLUSIVE");
		    statementKeywordsLanguage.add("EXEC");
		    statementKeywordsLanguage.add("EXECUTE");
		    statementKeywordsLanguage.add("EXISTS");
		    statementKeywordsLanguage.add("EXIT");
		    statementKeywordsLanguage.add("EXP_ROW_SIZE");
		    statementKeywordsLanguage.add("EXTERNAL");
		    statementKeywordsLanguage.add("FETCH");
		    statementKeywordsLanguage.add("FILLFACTOR");
		    statementKeywordsLanguage.add("FOR");
		    statementKeywordsLanguage.add("FOREIGN");
		    statementKeywordsLanguage.add("FROM");
		    statementKeywordsLanguage.add("GO");
		    statementKeywordsLanguage.add("GOTO");
		    statementKeywordsLanguage.add("GRANT");
		    statementKeywordsLanguage.add("GROUP");
		    statementKeywordsLanguage.add("HAVING");
		    statementKeywordsLanguage.add("HOLDLOCK");
		    statementKeywordsLanguage.add("IDENTITY");
		    statementKeywordsLanguage.add("IDENTITY_GAP");
		    statementKeywordsLanguage.add("IDENTITY_START");
		    statementKeywordsLanguage.add("IF");
		    statementKeywordsLanguage.add("IN");
		    statementKeywordsLanguage.add("INDEX");
		    statementKeywordsLanguage.add("INOUT");
		    statementKeywordsLanguage.add("INSENSITIVE");
		    statementKeywordsLanguage.add("INSERT");
		    statementKeywordsLanguage.add("INSTALL");
		    statementKeywordsLanguage.add("INTERSECT");
		    statementKeywordsLanguage.add("INTO");
		    statementKeywordsLanguage.add("IS");
		    statementKeywordsLanguage.add("ISOLATION");
		    statementKeywordsLanguage.add("JAR");
		    statementKeywordsLanguage.add("JOIN");
		    statementKeywordsLanguage.add("KEY");
		    statementKeywordsLanguage.add("KILL");
		    statementKeywordsLanguage.add("LEVEL");
		    statementKeywordsLanguage.add("LIKE");
		    statementKeywordsLanguage.add("LINENO");
		    statementKeywordsLanguage.add("LOAD");
		    statementKeywordsLanguage.add("LOCK");
		    statementKeywordsLanguage.add("MATERIALIZED");
		    statementKeywordsLanguage.add("MAX");
		    statementKeywordsLanguage.add("MAX_ROWS_PER_PAGE");
		    statementKeywordsLanguage.add("MIN");
		    statementKeywordsLanguage.add("MIRROR");
		    statementKeywordsLanguage.add("MIRROREXIT");
		    statementKeywordsLanguage.add("MODIFY");
		    statementKeywordsLanguage.add("NATIONAL");
		    statementKeywordsLanguage.add("NEW");
		    statementKeywordsLanguage.add("NOHOLDLOCK");
		    statementKeywordsLanguage.add("NONCLUSTERED");
		    statementKeywordsLanguage.add("NONSCROLLABLE");
		    statementKeywordsLanguage.add("NON_SENSITIVE");
		    statementKeywordsLanguage.add("NOT");
		    statementKeywordsLanguage.add("NULL");
		    statementKeywordsLanguage.add("NULLIF");
		    statementKeywordsLanguage.add("NUMERIC_TRUNCATION");
		    statementKeywordsLanguage.add("OF");
		    statementKeywordsLanguage.add("OFF");
		    statementKeywordsLanguage.add("OFFSETS");
		    statementKeywordsLanguage.add("ON");
		    statementKeywordsLanguage.add("ONCE");
		    statementKeywordsLanguage.add("ONLINE");
		    statementKeywordsLanguage.add("ONLY");
		    statementKeywordsLanguage.add("OPEN");
		    statementKeywordsLanguage.add("OPTION");
		    statementKeywordsLanguage.add("OR");
		    statementKeywordsLanguage.add("ORDER");
		    statementKeywordsLanguage.add("OUT");
		    statementKeywordsLanguage.add("OUTPUT");
		    statementKeywordsLanguage.add("OVER");
		    statementKeywordsLanguage.add("PARTITION");
		    statementKeywordsLanguage.add("PERM");
		    statementKeywordsLanguage.add("PERMANENT");
		    statementKeywordsLanguage.add("PLAN");
		    statementKeywordsLanguage.add("PREPARE");
		    statementKeywordsLanguage.add("PRIMARY");
		    statementKeywordsLanguage.add("PRINT");
		    statementKeywordsLanguage.add("PRIVILEGES");
		    statementKeywordsLanguage.add("PROC");
		    statementKeywordsLanguage.add("PROCEDURE");
		    statementKeywordsLanguage.add("PROCESSEXIT");
		    statementKeywordsLanguage.add("PROXY_TABLE");
		    statementKeywordsLanguage.add("PUBLIC");
		    statementKeywordsLanguage.add("QUIESCE");
		    statementKeywordsLanguage.add("RAISERROR");
		    statementKeywordsLanguage.add("READ");
		    statementKeywordsLanguage.add("READPAST");
		    statementKeywordsLanguage.add("READTEXT");
		    statementKeywordsLanguage.add("RECONFIGURE");
		    statementKeywordsLanguage.add("REFERENCES");
		    statementKeywordsLanguage.add("REMOVE");
		    statementKeywordsLanguage.add("REORG");
		    statementKeywordsLanguage.add("REPLACE");
		    statementKeywordsLanguage.add("REPLICATION");
		    statementKeywordsLanguage.add("RESERVEPAGEGAP");
		    statementKeywordsLanguage.add("RETURN");
		    statementKeywordsLanguage.add("RETURNS");
		    statementKeywordsLanguage.add("REVOKE");
		    statementKeywordsLanguage.add("ROLE");
		    statementKeywordsLanguage.add("ROLLBACK");
		    statementKeywordsLanguage.add("ROWCOUNT");
		    statementKeywordsLanguage.add("ROWS");
		    statementKeywordsLanguage.add("RULE");
		    statementKeywordsLanguage.add("SAVE");
		    statementKeywordsLanguage.add("SCHEMA");
		    statementKeywordsLanguage.add("SCROLL");
		    statementKeywordsLanguage.add("SCROLLABLE");
		    statementKeywordsLanguage.add("SELECT");
		    statementKeywordsLanguage.add("SEMI_SENSITIVE");
		    statementKeywordsLanguage.add("SET");
		    statementKeywordsLanguage.add("SETUSER");
		    statementKeywordsLanguage.add("SHARED");
		    statementKeywordsLanguage.add("SHUTDOWN");
		    statementKeywordsLanguage.add("SOME");
		    statementKeywordsLanguage.add("STATISTICS");
		    statementKeywordsLanguage.add("STRINGSIZE");
		    statementKeywordsLanguage.add("STRIPE");
		    statementKeywordsLanguage.add("SUM");
		    statementKeywordsLanguage.add("SYB_IDENTITY");
		    statementKeywordsLanguage.add("SYB_RESTREE");
		    statementKeywordsLanguage.add("SYB_TERMINATE");
		    statementKeywordsLanguage.add("TABLE");
		    statementKeywordsLanguage.add("TEMP");
		    statementKeywordsLanguage.add("TEMPORARY");
		    statementKeywordsLanguage.add("TEXTSIZE");
		    statementKeywordsLanguage.add("TO");
		    statementKeywordsLanguage.add("TRACEFILE");
		    statementKeywordsLanguage.add("TRAN");
		    statementKeywordsLanguage.add("TRANSACTION");
		    statementKeywordsLanguage.add("TRIGGER");
		    statementKeywordsLanguage.add("TRUNCATE");
		    statementKeywordsLanguage.add("TSEQUAL");
		    statementKeywordsLanguage.add("UNION");
		    statementKeywordsLanguage.add("UNIQUE");
		    statementKeywordsLanguage.add("UNPARTITION");
		    statementKeywordsLanguage.add("UPDATE");
		    statementKeywordsLanguage.add("USE");
		    statementKeywordsLanguage.add("USER");
		    statementKeywordsLanguage.add("USER_OPTION");
		    statementKeywordsLanguage.add("USING");
		    statementKeywordsLanguage.add("VALUES");
		    statementKeywordsLanguage.add("VARYING");
		    statementKeywordsLanguage.add("VIEW");
		    statementKeywordsLanguage.add("WAITFOR");
		    statementKeywordsLanguage.add("WHEN");
		    statementKeywordsLanguage.add("WHERE");
		    statementKeywordsLanguage.add("WHILE");
		    statementKeywordsLanguage.add("WITH");
		    statementKeywordsLanguage.add("WORK");
		    statementKeywordsLanguage.add("WRITETEXT");
		    statementKeywordsLanguage.add("XMLEXTRACT");
		    statementKeywordsLanguage.add("XMLPARSE");
		    statementKeywordsLanguage.add("XMLTEST");
		    statementKeywordsLanguage.add("XMLVALIDATE");
		 //*   
		 /* DATADYPE */   
		 //*
		    statementKeywordsLanguage.add("FLOATN");
		    statementKeywordsLanguage.add("FLOAT");
		    statementKeywordsLanguage.add("DATETIMN");
		    statementKeywordsLanguage.add("DATETIME");
		    statementKeywordsLanguage.add("REAL");
		    statementKeywordsLanguage.add("NUMERICN");
		    statementKeywordsLanguage.add("NUMERIC");
		    statementKeywordsLanguage.add("DECIMALN");
		    statementKeywordsLanguage.add("DECIMAL");
		    statementKeywordsLanguage.add("MONEYN");
		    statementKeywordsLanguage.add("MONEY");
		    statementKeywordsLanguage.add("SMALLMONEY");
		    statementKeywordsLanguage.add("SMALLDATETIME");
		    statementKeywordsLanguage.add("INTN");
		    statementKeywordsLanguage.add("INT");
		    statementKeywordsLanguage.add("INTEGER");
		    statementKeywordsLanguage.add("SMALLINT");
		    statementKeywordsLanguage.add("TINYINT");
		    statementKeywordsLanguage.add("BIT");
		    statementKeywordsLanguage.add("UNIVARCHAR");
		    statementKeywordsLanguage.add("UNICHAR");
		    statementKeywordsLanguage.add("SYSNAME");
		    statementKeywordsLanguage.add("VARCHAR");
		    statementKeywordsLanguage.add("NVARCHAR");
		    statementKeywordsLanguage.add("CHAR");
		    statementKeywordsLanguage.add("NCHAR");
		    statementKeywordsLanguage.add("TIMESTAMP");
		    statementKeywordsLanguage.add("VARBINARY");
		    statementKeywordsLanguage.add("BINARY");
		    statementKeywordsLanguage.add("TEXT");
		    statementKeywordsLanguage.add("IMAGE");
		 //==========   
		 // SET OPTION    
		 //==========   
		    statementKeywordsLanguage.add("ARITHABORT");
		    statementKeywordsLanguage.add("NOCOUNT");
		 //==========   
		 // FUNCTION    
		 //==========  
		    statementKeywordsLanguage.add("DATEADD");
		    statementKeywordsLanguage.add("DATEPART");
		    statementKeywordsLanguage.add("GETDATE"); 
		    statementKeywordsLanguage.add("ISNULL");
		    statementKeywordsLanguage.add("LTRIM");
		    statementKeywordsLanguage.add("REPLICATE");    
		    statementKeywordsLanguage.add("RTRIM");
		    statementKeywordsLanguage.add("STR");
	}
	
	private void setLanguageFunctionsLanguage() { // Esse que vale
//      LanguageFunctionKeywordsLanguage.add("Convert");
//      LanguageFunctionKeywordsLanguage.add("Ltrim");
//      LanguageFunctionKeywordsLanguage.add("Rtrim");
//      LanguageFunctionKeywordsLanguage.add("Substring");
//      LanguageFunctionKeywordsLanguage.add("GetDate");
//      LanguageFunctionKeywordsLanguage.add("Max");
//      LanguageFunctionKeywordsLanguage.add("Min");
//      LanguageFunctionKeywordsLanguage.add("Avg");
//      LanguageFunctionKeywordsLanguage.add("Abs"); 
//      LanguageFunctionKeywordsLanguage.add("Floor");
//      LanguageFunctionKeywordsLanguage.add("Sum");
//      LanguageFunctionKeywordsLanguage.add("IsNull");
//      LanguageFunctionKeywordsLanguage.add("Count");
//      LanguageFunctionKeywordsLanguage.add("DateAdd");
//      LanguageFunctionKeywordsLanguage.add("DatePart");
//      LanguageFunctionKeywordsLanguage.add("Replicate");    
//      LanguageFunctionKeywordsLanguage.add("Str");
		LanguageFunctionKeywordsLanguage.add("ABS");
		LanguageFunctionKeywordsLanguage.add("ACOS");
		LanguageFunctionKeywordsLanguage.add("ARGN");
		LanguageFunctionKeywordsLanguage.add("ASCII");
		LanguageFunctionKeywordsLanguage.add("ASIN");
		LanguageFunctionKeywordsLanguage.add("ATAN");
		LanguageFunctionKeywordsLanguage.add("ATAN2");
		LanguageFunctionKeywordsLanguage.add("AVG");
		LanguageFunctionKeywordsLanguage.add("BFILE");
		LanguageFunctionKeywordsLanguage.add("BIGINTTOHEX");
		LanguageFunctionKeywordsLanguage.add("BIT_LENGTH");
		LanguageFunctionKeywordsLanguage.add("BYTE_LENGTH");
		LanguageFunctionKeywordsLanguage.add("BYTE_LENGTH64");
		LanguageFunctionKeywordsLanguage.add("BYTE_SUBSTR64");
		LanguageFunctionKeywordsLanguage.add("BYTE_SUBSTR");
		LanguageFunctionKeywordsLanguage.add("BYTE_SUBSTR64");
		LanguageFunctionKeywordsLanguage.add("CAST");
		LanguageFunctionKeywordsLanguage.add("CEIL");
		LanguageFunctionKeywordsLanguage.add("CEILING");
		LanguageFunctionKeywordsLanguage.add("CHAR");
		LanguageFunctionKeywordsLanguage.add("CHAR_LENGTH");
		LanguageFunctionKeywordsLanguage.add("CHAR_LENGTH64");
		LanguageFunctionKeywordsLanguage.add("CHARINDEX");
		LanguageFunctionKeywordsLanguage.add("COALESCE");
		LanguageFunctionKeywordsLanguage.add("COL_LENGTH");
		LanguageFunctionKeywordsLanguage.add("COL_NAME");
		LanguageFunctionKeywordsLanguage.add("CONNECTION_PROPERTY");
		LanguageFunctionKeywordsLanguage.add("CONVERT");
		LanguageFunctionKeywordsLanguage.add("CORR");
		LanguageFunctionKeywordsLanguage.add("COS");
		LanguageFunctionKeywordsLanguage.add("COT");
		LanguageFunctionKeywordsLanguage.add("COVAR_POP");
		LanguageFunctionKeywordsLanguage.add("COVAR_SAMP");
		LanguageFunctionKeywordsLanguage.add("COUNT");
		LanguageFunctionKeywordsLanguage.add("CUME_DIST");
		LanguageFunctionKeywordsLanguage.add("DATALENGTH");
		LanguageFunctionKeywordsLanguage.add("DATE");
		LanguageFunctionKeywordsLanguage.add("DATEADD");
		LanguageFunctionKeywordsLanguage.add("DATECEILING");
		LanguageFunctionKeywordsLanguage.add("DATEDIFF");
		LanguageFunctionKeywordsLanguage.add("DATEFLOOR");
		LanguageFunctionKeywordsLanguage.add("DATEFORMAT");
		LanguageFunctionKeywordsLanguage.add("DATENAME");
		LanguageFunctionKeywordsLanguage.add("DATEPART");
		LanguageFunctionKeywordsLanguage.add("DATEROUND");
		LanguageFunctionKeywordsLanguage.add("DATETIME");
		LanguageFunctionKeywordsLanguage.add("DAY");
		LanguageFunctionKeywordsLanguage.add("DAYNAME");
		LanguageFunctionKeywordsLanguage.add("DAYS");
		LanguageFunctionKeywordsLanguage.add("DB_ID");
		LanguageFunctionKeywordsLanguage.add("DB_NAME");
		LanguageFunctionKeywordsLanguage.add("DB_PROPERTY");
		LanguageFunctionKeywordsLanguage.add("DEGREES");
		LanguageFunctionKeywordsLanguage.add("DENSE_RANK");
		LanguageFunctionKeywordsLanguage.add("DIFFERENCE");
		LanguageFunctionKeywordsLanguage.add("DOW");
		LanguageFunctionKeywordsLanguage.add("ERRORMSG");
		LanguageFunctionKeywordsLanguage.add("EVENT_CONDITION");
		LanguageFunctionKeywordsLanguage.add("EVENT_CONDITION_NAME");
		LanguageFunctionKeywordsLanguage.add("EVENT_PARAMETER");
		LanguageFunctionKeywordsLanguage.add("EXP");
		LanguageFunctionKeywordsLanguage.add("EXP_WEIGHTED_AVG");
		LanguageFunctionKeywordsLanguage.add("FIRST_VALUE");
		LanguageFunctionKeywordsLanguage.add("FLOOR");
		LanguageFunctionKeywordsLanguage.add("GETDATE");
		LanguageFunctionKeywordsLanguage.add("GRAPHICAL_PLAN");
		LanguageFunctionKeywordsLanguage.add("GROUPING");
		LanguageFunctionKeywordsLanguage.add("GROUP_MEMBER");
		LanguageFunctionKeywordsLanguage.add("HEXTOBIGINT");
		LanguageFunctionKeywordsLanguage.add("HEXTOINT");
		LanguageFunctionKeywordsLanguage.add("HOUR");
		LanguageFunctionKeywordsLanguage.add("HOURS");
		LanguageFunctionKeywordsLanguage.add("HTML_DECODE");
		LanguageFunctionKeywordsLanguage.add("HTML_ENCODE");
		LanguageFunctionKeywordsLanguage.add("HTML_PLAN");
		LanguageFunctionKeywordsLanguage.add("HTTP_DECODE");
		LanguageFunctionKeywordsLanguage.add("HTTP_ENCODE");
		LanguageFunctionKeywordsLanguage.add("HTTP_HEADER");
		LanguageFunctionKeywordsLanguage.add("HTTP_VARIABLE");
		LanguageFunctionKeywordsLanguage.add("IFNULL");
		LanguageFunctionKeywordsLanguage.add("INDEX_COL");
		LanguageFunctionKeywordsLanguage.add("INSERTSTR");
		LanguageFunctionKeywordsLanguage.add("INTTOHEX");
		LanguageFunctionKeywordsLanguage.add("ISDATE");
		LanguageFunctionKeywordsLanguage.add("ISNULL");
		LanguageFunctionKeywordsLanguage.add("ISNUMERIC");
		LanguageFunctionKeywordsLanguage.add("LAG");
		LanguageFunctionKeywordsLanguage.add("LAST_VALUE");
		LanguageFunctionKeywordsLanguage.add("LCASE");
		LanguageFunctionKeywordsLanguage.add("LEAD");
		LanguageFunctionKeywordsLanguage.add("LEFT");
		LanguageFunctionKeywordsLanguage.add("LEN");
		LanguageFunctionKeywordsLanguage.add("LENGTH");
		LanguageFunctionKeywordsLanguage.add("LIST");
		LanguageFunctionKeywordsLanguage.add("LN");
		LanguageFunctionKeywordsLanguage.add("LOCATE");
		LanguageFunctionKeywordsLanguage.add("LOG");
		LanguageFunctionKeywordsLanguage.add("LOG10");
		LanguageFunctionKeywordsLanguage.add("LOWER");
		LanguageFunctionKeywordsLanguage.add("LTRIM");
		LanguageFunctionKeywordsLanguage.add("MAX");
		LanguageFunctionKeywordsLanguage.add("MEDIAN");
		LanguageFunctionKeywordsLanguage.add("MIN");
		LanguageFunctionKeywordsLanguage.add("MINUTE");
		LanguageFunctionKeywordsLanguage.add("MINUTES");
		LanguageFunctionKeywordsLanguage.add("MOD");
		LanguageFunctionKeywordsLanguage.add("MONTH");
		LanguageFunctionKeywordsLanguage.add("MONTHNAME");
		LanguageFunctionKeywordsLanguage.add("MONTHS");
		LanguageFunctionKeywordsLanguage.add("NEWID");
		LanguageFunctionKeywordsLanguage.add("NEXT_CONNECTION");
		LanguageFunctionKeywordsLanguage.add("NEXT_DATABASE");
		LanguageFunctionKeywordsLanguage.add("NEXT_HTTP_HEADER");
		LanguageFunctionKeywordsLanguage.add("NEXT_HTTP_VARIABLE");
		LanguageFunctionKeywordsLanguage.add("NOW");
		LanguageFunctionKeywordsLanguage.add("NTILE");
		LanguageFunctionKeywordsLanguage.add("NULLIF");
		LanguageFunctionKeywordsLanguage.add("NUMBER");
		LanguageFunctionKeywordsLanguage.add("OBJECT_ID");
		LanguageFunctionKeywordsLanguage.add("OBJECT_NAME");
		LanguageFunctionKeywordsLanguage.add("OCTET_LENGTH");
		LanguageFunctionKeywordsLanguage.add("PATINDEX");
		LanguageFunctionKeywordsLanguage.add("PERCENT_RANK");
		LanguageFunctionKeywordsLanguage.add("PERCENTILE_CONT");
		LanguageFunctionKeywordsLanguage.add("PERCENTILE_DISC");
		LanguageFunctionKeywordsLanguage.add("PI");
		LanguageFunctionKeywordsLanguage.add("POWER");
		LanguageFunctionKeywordsLanguage.add("PROPERTY");
		LanguageFunctionKeywordsLanguage.add("PROPERTY_DESCRIPTION");
		LanguageFunctionKeywordsLanguage.add("PROPERTY_NAME");
		LanguageFunctionKeywordsLanguage.add("PROPERTY_NUMBER");
		LanguageFunctionKeywordsLanguage.add("QUARTER");
		LanguageFunctionKeywordsLanguage.add("RADIANS");
		LanguageFunctionKeywordsLanguage.add("RAND");
		LanguageFunctionKeywordsLanguage.add("RANK");
		LanguageFunctionKeywordsLanguage.add("REGR_AVGX");
		LanguageFunctionKeywordsLanguage.add("REGR_AVGY");
		LanguageFunctionKeywordsLanguage.add("REGR_COUNT");
		LanguageFunctionKeywordsLanguage.add("REGR_INTERCEPT");
		LanguageFunctionKeywordsLanguage.add("REGR_R2");
		LanguageFunctionKeywordsLanguage.add("REGR_SLOPE");
		LanguageFunctionKeywordsLanguage.add("REGR_SXX");
		LanguageFunctionKeywordsLanguage.add("REGR_SXY");
		LanguageFunctionKeywordsLanguage.add("REGR_SYY");
		LanguageFunctionKeywordsLanguage.add("REMAINDER");
		LanguageFunctionKeywordsLanguage.add("REPEAT");
		LanguageFunctionKeywordsLanguage.add("REPLACE");
		LanguageFunctionKeywordsLanguage.add("REPLICATE");
		LanguageFunctionKeywordsLanguage.add("REVERSE");
		LanguageFunctionKeywordsLanguage.add("RIGHT");
		LanguageFunctionKeywordsLanguage.add("ROUND");
		LanguageFunctionKeywordsLanguage.add("ROW_NUMBER");
		LanguageFunctionKeywordsLanguage.add("ROWID");
		LanguageFunctionKeywordsLanguage.add("RTRIM");
		LanguageFunctionKeywordsLanguage.add("SECOND");
		LanguageFunctionKeywordsLanguage.add("SECONDS");
		LanguageFunctionKeywordsLanguage.add("SIGN");
		LanguageFunctionKeywordsLanguage.add("SIMILAR");
		LanguageFunctionKeywordsLanguage.add("SIN");
		LanguageFunctionKeywordsLanguage.add("SORTKEY");
		LanguageFunctionKeywordsLanguage.add("SOUNDEX");
		LanguageFunctionKeywordsLanguage.add("SPACE");
		LanguageFunctionKeywordsLanguage.add("SQLFLAGGER");
		LanguageFunctionKeywordsLanguage.add("SQRT");
		LanguageFunctionKeywordsLanguage.add("SQUARE");
		LanguageFunctionKeywordsLanguage.add("STDDEV");
		LanguageFunctionKeywordsLanguage.add("STDDEV_POP");
		LanguageFunctionKeywordsLanguage.add("STDDEV_SAMP");
		LanguageFunctionKeywordsLanguage.add("STR");
		LanguageFunctionKeywordsLanguage.add("STR_REPLACE");
		LanguageFunctionKeywordsLanguage.add("STRING");
		LanguageFunctionKeywordsLanguage.add("STRTOUUID");
		LanguageFunctionKeywordsLanguage.add("STUFF");
		LanguageFunctionKeywordsLanguage.add("SUBSTRING");
		LanguageFunctionKeywordsLanguage.add("SUBSTRING64");
		LanguageFunctionKeywordsLanguage.add("SUM");
		LanguageFunctionKeywordsLanguage.add("SUSER_ID");
		LanguageFunctionKeywordsLanguage.add("SUSER_NAME");
		LanguageFunctionKeywordsLanguage.add("TAN");
		LanguageFunctionKeywordsLanguage.add("TODAY");
		LanguageFunctionKeywordsLanguage.add("TRIM");
		LanguageFunctionKeywordsLanguage.add("TRUNCNUM");
		LanguageFunctionKeywordsLanguage.add("TS_ARMA_AR");
		LanguageFunctionKeywordsLanguage.add("TS_ARMA_CONST");
		LanguageFunctionKeywordsLanguage.add("TS_ARMA_MA");
		LanguageFunctionKeywordsLanguage.add("TS_AUTOCORRELATION");
		LanguageFunctionKeywordsLanguage.add("TS_AUTO_ARIMA");
		LanguageFunctionKeywordsLanguage.add("TS_AUTO_ARIMA_OUTLIER");
		LanguageFunctionKeywordsLanguage.add("TS_AUTO_ARIMA_RESULT_AIC");
		LanguageFunctionKeywordsLanguage.add("TS_AUTO_ARIMA_RESULT_AICC");
		LanguageFunctionKeywordsLanguage.add("TS_AUTO_ARIMA_RESULT_BIC");
		LanguageFunctionKeywordsLanguage.add("TS_AUTO_ARIMA_RESULT_FORECAST_VALUE");
		LanguageFunctionKeywordsLanguage.add("TS_AUTO_ARIMA_RESULT_FORECAST_ERROR");
		LanguageFunctionKeywordsLanguage.add("TS_AUTO_ARIMA_RESULT_MODEL_D");
		LanguageFunctionKeywordsLanguage.add("TS_AUTO_ARIMA_RESULT_MODEL_P");
		LanguageFunctionKeywordsLanguage.add("TS_AUTO_ARIMA_RESULT_MODEL_S");
		LanguageFunctionKeywordsLanguage.add("TS_AUTO_UNI_AR");
		LanguageFunctionKeywordsLanguage.add("TS_BOX_COX_XFORM");
		LanguageFunctionKeywordsLanguage.add("TS_DIFFERENCE");
		LanguageFunctionKeywordsLanguage.add("TS_ESTIMATE_MISSING");
		LanguageFunctionKeywordsLanguage.add("TS_GARCH");
		LanguageFunctionKeywordsLanguage.add("TS_GARCH_RESULT_A");
		LanguageFunctionKeywordsLanguage.add("TS_GARCH_RESULT_AIC");
		LanguageFunctionKeywordsLanguage.add("TS_LACK_OF_FIT");
		LanguageFunctionKeywordsLanguage.add("TS_LACK_OF_FIT_P");
		LanguageFunctionKeywordsLanguage.add("TS_MAX_ARMA_AR");
		LanguageFunctionKeywordsLanguage.add("TS_MAX_ARMA_CONST");
		LanguageFunctionKeywordsLanguage.add("TS_MAX_ARMA_LIKELIHOOD");
		LanguageFunctionKeywordsLanguage.add("TS_MAX_ARMA_MA");
		LanguageFunctionKeywordsLanguage.add("TS_OUTLIER_IDENTIFICATION");
		LanguageFunctionKeywordsLanguage.add("TS_PARTIAL_AUTOCORRELATION");
		LanguageFunctionKeywordsLanguage.add("TS_VWAP");
		LanguageFunctionKeywordsLanguage.add("UCASE");
		LanguageFunctionKeywordsLanguage.add("UPPER");
		LanguageFunctionKeywordsLanguage.add("USER_ID");
		LanguageFunctionKeywordsLanguage.add("USER_NAME");
		LanguageFunctionKeywordsLanguage.add("UUIDTOSTR");
		LanguageFunctionKeywordsLanguage.add("VAR_POP");
		LanguageFunctionKeywordsLanguage.add("VAR_SAMP");
		LanguageFunctionKeywordsLanguage.add("VARIANCE");
		LanguageFunctionKeywordsLanguage.add("WEEKS");
		LanguageFunctionKeywordsLanguage.add("WEIGHTED_AVG");
		LanguageFunctionKeywordsLanguage.add("WIDTH_BUCKET");
		LanguageFunctionKeywordsLanguage.add("YEAR");
		LanguageFunctionKeywordsLanguage.add("YEARS");
		LanguageFunctionKeywordsLanguage.add("YMD");		
	}	
	
	@Override
	public void setKeywordsOption1() {
		keywordsOption1.add("FLOATN");
        keywordsOption1.add("FLOAT");
        keywordsOption1.add("DATETIMN");
        keywordsOption1.add("DATETIME");
        keywordsOption1.add("REAL");
        keywordsOption1.add("NUMERICN");
        keywordsOption1.add("NUMERIC");
        keywordsOption1.add("DECIMALN");
        keywordsOption1.add("DECIMAL");
        keywordsOption1.add("MONEYN");
        keywordsOption1.add("MONEY");
        keywordsOption1.add("SMALLMONEY");
        keywordsOption1.add("SMALLDATETIME");
        keywordsOption1.add("INTN");
        keywordsOption1.add("INT");
        keywordsOption1.add("INTEGER");
        keywordsOption1.add("SMALLINT");
        keywordsOption1.add("TINYINT");
        keywordsOption1.add("BIT");
        keywordsOption1.add("UNIVARCHAR");
        keywordsOption1.add("UNICHAR");
        keywordsOption1.add("SYSNAME");
        keywordsOption1.add("VARCHAR");
        keywordsOption1.add("NVARCHAR");
        keywordsOption1.add("CHAR");
        keywordsOption1.add("NCHAR");
        keywordsOption1.add("TIMESTAMP");
        keywordsOption1.add("VARBINARY");
        keywordsOption1.add("BINARY");
        keywordsOption1.add("TEXT");
        keywordsOption1.add("IMAGE");
	}

	@Override
	public boolean isCaseSensitive() {
		return false;
	}
	
	private void setDataTypeLanguage() {
		dataTypeKeywordsLanguage.add("FLOATN");
        dataTypeKeywordsLanguage.add("FLOAT");
        dataTypeKeywordsLanguage.add("DATETIMN");
        dataTypeKeywordsLanguage.add("DATETIME");
        dataTypeKeywordsLanguage.add("REAL");
        dataTypeKeywordsLanguage.add("NUMERICN");
        dataTypeKeywordsLanguage.add("NUMERIC");
        dataTypeKeywordsLanguage.add("DECIMALN");
        dataTypeKeywordsLanguage.add("DECIMAL");
        dataTypeKeywordsLanguage.add("MONEYN");
        dataTypeKeywordsLanguage.add("MONEY");
        dataTypeKeywordsLanguage.add("SMALLMONEY");
        dataTypeKeywordsLanguage.add("SMALLDATETIME");
        dataTypeKeywordsLanguage.add("INTN");
        dataTypeKeywordsLanguage.add("INT");
        dataTypeKeywordsLanguage.add("INTEGER");
        dataTypeKeywordsLanguage.add("SMALLINT");
        dataTypeKeywordsLanguage.add("TINYINT");
        dataTypeKeywordsLanguage.add("BIT");
        dataTypeKeywordsLanguage.add("UNIVARCHAR");
        dataTypeKeywordsLanguage.add("UNICHAR");
        dataTypeKeywordsLanguage.add("SYSNAME");
        dataTypeKeywordsLanguage.add("VARCHAR");
        dataTypeKeywordsLanguage.add("NVARCHAR");
        dataTypeKeywordsLanguage.add("CHAR");
        dataTypeKeywordsLanguage.add("NCHAR");
        dataTypeKeywordsLanguage.add("TIMESTAMP");
        dataTypeKeywordsLanguage.add("VARBINARY");
        dataTypeKeywordsLanguage.add("BINARY");
        dataTypeKeywordsLanguage.add("TEXT");
        dataTypeKeywordsLanguage.add("IMAGE");
	}
	
	private void setClassConstantsLanguage() {
		classConstantLanguage.add("@@Error");
		classConstantLanguage.add("@@ROWCOUNT");
		classConstantLanguage.add("@@SQLSTATUS");
	}	
}
